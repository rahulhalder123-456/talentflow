
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin.
    // This requires that any authenticated user can `get` the `/config/admins` document.
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/config/admins).data.uids.hasAny([request.auth.uid]);
    }
    
    // This document stores the list of admin UIDs.
    match /config/admins {
      // Any authenticated user can read this document. This is required for the `isAdmin()` function to work.
      allow get: if request.auth != null;
      // Only an existing admin can modify the list of admins.
      allow write: if isAdmin();
    }

    // Featured projects are public for the homepage showcase.
    match /featuredProjects/{projectId} {
      allow read: if true; // 'read' is a shorthand for 'get' and 'list'
      allow write: if isAdmin();
    }

    // User-specific data.
    match /users/{userId} {
      // A user can read/write their own data. Admins can read anyone's data.
      allow read: if request.auth.uid == userId || isAdmin();
      allow write: if request.auth.uid == userId;

      // Sub-collection for payment methods.
      match /paymentMethods/{methodId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }

    // Projects data.
    match /projects/{projectId} {
      // Users can get their own project. Admins can get any project.
      allow get: if (request.auth.uid == resource.data.userId || isAdmin());
      // Authenticated users can list projects (e.g., for their dashboard).
      // Note: Secure list queries require corresponding Firestore query constraints in the app.
      allow list: if request.auth != null; 
      // Any authenticated user can create a project for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Users can update their own project. Admins can update any project.
      allow update: if (request.auth.uid == resource.data.userId || isAdmin());

      // Sub-collection for time tracking on projects.
      match /timeEntries/{entryId} {
        allow read, write: if isAdmin();
      }
    }
    
    // Reviews are public.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    // Support chats between users and admins.
    match /chats/{chatId} {
      // A user can access a chat if their UID is in the chat document ID or if they are an admin.
      allow read, write: if (request.auth.uid in string(chatId).split('_')) || isAdmin();
        
      // Messages are a sub-collection of chats.
      match /messages/{messageId} {
        allow read, write: if (request.auth.uid in string(chatId).split('_')) || isAdmin();
      }
    }
  }
}
