
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Functions ---
    
    // Function to check if the currently authenticated user is an admin.
    // It safely checks for the existence of the admin config document.
    function isAdmin() {
      return exists(/databases/$(database)/documents/config/admins) &&
             request.auth.uid in get(/databases/$(database)/documents/config/admins).data.uids;
    }

    // --- Configuration ---

    // The document storing admin UIDs.
    match /config/admins {
      // Any authenticated user can read the admin list to verify roles.
      allow read: if request.auth != null;
      // Only an existing admin can change the list of admins.
      allow write: if request.auth != null && isAdmin();
    }

    // --- User Data ---

    // User profile data and their subcollections.
    match /users/{userId} {
      // A user can create their own profile upon signup.
      // They can also read and update their own profile data.
      allow create, read, update: if request.auth.uid == userId;

      // An admin can get any individual user's profile or list all users.
      allow get, list: if request.auth != null && isAdmin();
      
      // A user can manage their own payment methods.
      match /paymentMethods/{methodId} {
          allow read, write, delete: if request.auth.uid == userId;
      }
    }

    // --- Core App Data ---
    
    // Project documents.
    match /projects/{projectId} {
        // Any authenticated user can create a project.
        allow create: if request.auth != null;
        // A user can read/update their own project. An admin can read/update any project.
        allow read, update: if (request.auth.uid == resource.data.userId) || (request.auth != null && isAdmin());
        // An admin can list all projects.
        allow list: if request.auth != null && isAdmin();

        // Time entries for projects can only be managed by an admin.
        match /timeEntries/{entryId} {
            allow read, list, create: if request.auth != null && isAdmin();
        }
    }
    
    // Chat rooms and messages.
    match /chats/{chatId} {
        // Helper function to check if the user is the client for this chat.
        function isChatParticipant() {
          return request.auth.uid == chatId.replace('support_', '');
        }

        // A participant or an admin can access the chat and its messages.
        allow read, write: if request.auth != null && (isChatParticipant() || isAdmin());
        
        match /messages/{messageId} {
            allow read, create: if request.auth != null && (isChatParticipant() || isAdmin());
        }
    }
    
    // Featured projects for the landing page showcase.
    match /featuredProjects/{projectId} {
        // Anyone can read featured projects.
        allow read: if true;
        // Only admins can create, update, or delete them.
        allow write: if request.auth != null && isAdmin();
    }

    // Reviews for completed projects.
    match /reviews/{reviewId} {
        // A user can only create a review if their UID matches the one in the review document.
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        // Anyone can read reviews.
        allow read: if true;
    }
  }
}
