
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      // Use exists() to prevent errors if the /config/admins document has not been created yet.
      return isAuth() && 
             exists(/databases/$(database)/documents/config/admins) && 
             request.auth.uid in get(/databases/$(database)/documents/config/admins).data.uids;
    }

    // =================================
    // Projects Collection
    // =================================
    match /projects/{projectId} {
      // An authenticated user can create a project.
      allow create: if isAuth();

      // An owner or an admin can update/delete a project.
      allow update, delete: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());

      // Reading a project (single doc or a list) is allowed if you are the owner or an admin.
      // For list queries, the query from the client MUST constrain the data to what the rule allows.
      // - Admins can query the whole collection.
      // - Regular users' queries MUST include `where("userId", "==", request.auth.uid)`.
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());

      // --- Subcollection: timeEntries ---
      match /timeEntries/{entryId} {
        // Only the project owner or an admin can read time entries.
        allow read: if isAuth() && (get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid || isAdmin());
        // Only an admin can write time entries.
        allow write: if isAuth() && isAdmin();
      }
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Only the user themselves can create or update their profile.
      allow create, update: if isAuth() && request.auth.uid == userId;

      // Any authenticated user can view a user's profile.
      allow get: if isAuth();
      
      // Only admins can list all users.
      allow list: if isAuth() && isAdmin();

      // --- Subcollection: paymentMethods ---
      match /paymentMethods/{paymentId} {
        // Payment methods are private to the user.
        allow read, write: if isAuth() && request.auth.uid == userId;
      }
    }

    // =================================
    // Chats Collection
    // =================================
    match /chats/{chatId} {
      function isChatParticipant() {
        return chatId.split('_')[1] == request.auth.uid;
      }
      
      // A user can access a chat if they are the client for that chat, or if they are an admin.
      allow read, write: if isAuth() && (isChatParticipant() || isAdmin());
      
      match /messages/{messageId} {
        allow read: if isAuth() && (isChatParticipant() || isAdmin());
        // A message can be created by the client or by an admin.
        allow create: if isAuth() && (request.resource.data.senderId == request.auth.uid || isAdmin());
      }
    }

    // =================================
    // Public Collections
    // =================================
    match /featuredProjects/{projectId} {
      allow get, list: if true; // Publicly readable
      allow write: if isAuth() && isAdmin(); // Only admins can write
    }
    
    match /reviews/{reviewId} {
      allow get, list: if true; // Publicly readable
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
    }

    // =================================
    // Admin Configuration
    // =================================
    match /config/admins {
      // This document contains the list of admin UIDs.
      // Any authenticated user can read it (required for the isAdmin() function to work).
      allow get: if isAuth();
      // Only an existing admin can modify the list of admins.
      allow write: if isAuth() && isAdmin();
    }
  }
}
